{"pages":[],"posts":[{"title":"one","permalink":"YOUR_SITE/2017/03/06/one/","text":"����һ�����Ե��ļ�one","tags":[]},{"title":"Hello World","permalink":"YOUR_SITE/2017/03/06/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"Mone","permalink":"YOUR_SITE/2017/03/02/Mone/","text":"crontab命令[TOC] crontab命令被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。 at 适合仅执行一次就结束的调度命令，需要启动一个后端的atd服务。crontab 需要启动一个服务crond才行，crond服务通过crontab命令实现。anacron 无法周期性执行，只能以天为周期，但有个特点，在关机状态下未执行的任务，下次开机时可以补上执行注：crontab为最常用的定时任务。 安装crontab: yum install crontabs 服务相关Centos6.01234567/sbin/service crond start //启动服务/sbin/service crond stop //关闭服务/sbin/service crond restart //重启服务/sbin/service crond reload //重新载入配置/sbin/service crond status //查看crontab服务状态查看crontab服务是否已设置为开机启动，执行命令：ntsysvchkconfig –level 35 crond on //加入开机自动启动 Centos7.012345678910111213141516启动服务（等同于service crond start）systemctl start crond.service停止服务（等同于service crond stop）systemctl stop crond.service重启服务（等同于service crond restart）systemctl restart crond.service查看服务是否运行（等同于service crond status）systemctl status crond.service开机自启动服务（等同于chkconfig crond on）systemctl enable crond.service开机时禁用服务（等同于chkconfig crond on）systemctl disable crond.service查看服务是否开机启动 （等同于chkconfig --list）systemctl is-enabled crond.service重新加载服务配置文件systemctl reload crond.service 命令语法 crontab(选项)(参数) 选项 -e 编辑该用户的计时器设置； -l 列出该用户的计时器设置； -r 删除该用户的计时器设置； -u&lt;用户名称&gt; 指定要设定计时器的用户名称。 参数 crontab文件：指定包含待执行任务的crontab文件。 知识扩展 在LINUX中，周期执行的任务一般由cron这个守护进程来处理[ps -ef|grep cron]。cron读取一个或多个配置文件，这些配置文件中包含了命令行及其调用时间。cron的配置文件称为“crontab”，是“cron table”的简写。cron在3个地方查找配置文件： /var/spool/cron/ 这个目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名，比如tom建的crontab任务对应的文件就是/var/spool/cron/tom。一般一个用户最多只有一个crontab文件。 /etc/crontab 这个文件负责安排由系统管理员制定的维护系统以及其他任务的crontab。 /etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。 123456789101112131415[root@MLibra ~]# cat /etc/crontabSHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 四行是用来配置crond任务运行的环境变量 第一行SHELL变量指定了系统要使用哪个shell，这里是bash。 第二行PATH变量指定了系统执行命令的路径。 第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户 用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab文件都被保存在/var/spool/cron目录中,其文件名与用户名一致。 crond定时任务限权123/etc/cron.deny 该文件中所列用户不允许使用crontab命令/etc/cron.allow 该文件中所列用户允许使用crontab命令/var/spool/cron/ 所有用户crontab文件存放的目录,以用户名命名 如果两个文件都不存在，则只有root用户才能使用crontab命令。 如果cron.allow存在但cron.deny不存在，则只有列在cron.allow文件里的用户才能使用crontab命令，如果root用户也不在里面，则root用户也不能使用crontab。 如果cron.allow不存在, cron.deny存在，则只有列在cron.deny文件里面的用户不能使用crontab命令，其它用户都能使用。 如果两个文件都存在，则列在cron.allow文件中而且没有列在cron.deny中的用户可以使用crontab，如果两个文件中都有同一个用户，以cron.allow文件里面是否有该用户为准，如果cron.allow中有该用户，则可以使用crontab命令。 允许测试在cron.allow中加入用户后，该用户能编辑定时任务1234567[root@test ~]# cat /etc/cron.allowtest[root@test ~]# su - test[test@test ~]$ crontab -e #&lt;==test用户编辑成功*/1 * * * * echo successful &gt;/tmp/a.log[test@test ~]$ crontab -l*/1 * * * * echo successful &gt;/tmp/a.log 清空允许用户123456789[test@test ~]$ su - rootPassword:[root@test ~]# echo &gt;/etc/cron.allow[root@test ~]# su - test[test@test ~]$ crontab -l #&lt;==test用户连查看的权限都没有You (test)are not allowed to use this program (crontab)See crontab(1) for more information[test@test ~]$ cat /etc/cron.denytest 清空cron.allow允许用户后，该用户又被cron.deny拒绝，**得出结论：/etc/cron.allow优先于/etc/cron.deny配置 每次编辑完某个用户的cron设置后，cron自动在/var/spool/cron下生成一个与此用户同名的文件，此用户的cron信息都记录在这个文件中，这个文件是不可以直接编辑的，只可以用crontab -e 来编辑。cron启动后每过一份钟读一次这个文件，检查是否要执行里面的命令。因此此文件修改后不需要重新启动cron服务。 crontab文件的含义用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段 格式如下： minute hour day month day week command 12345678910[root@MLibra ~]# cat /etc/crontab# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 参数说明 minute： 表示分钟，可以是从0到59之间的任何整数。 hour：表示小时，可以是从0到23之间的任何整数。 day：表示日期，可以是从1到31之间的任何整数。 month：表示月份，可以是从1到12之间的任何整数。 week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。 command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。 数字表达方式 * 星号每的意思,如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。 - 减号表示一个整数范围，如:00 17-19 * * * cmd 每天下午17点，18点，19点执行一次命令 , 逗号指定一个列表范围，如:00 10-11,17-19 * * * cmd 每天的上午10,11点整，下午的17,18,19点整执行一次命令 /n n代表数字，指定时间的间隔频率，如: */2 * * * * cmd 每隔2分钟执行一次命令 注意 :当程序在你所指定的时间执行后，系统会寄一封信给你，显示该程序执行的内容，若是你不希望收到这样的信，请在每一行空一格之后加上 &gt; /dev/null 2&gt;&amp;1 即可 crontab文件举例1.每月10号及20号的3：30执行ls命令[注：“，”用来连接多个不连续的时段130 3 10,20 * * ls 2.每天8-11点的第25分钟执行ls命令[注：“-”用来连接连续的时段]125 8-11 * * * ls 3.每15分钟执行一次ls命令 [即每个小时的第0 15 30 45 60分钟执行ls命令 ]1*/15 * * * * ls 4.每个月中，每隔10天6:30执行一次ls命令[即每月的1、11、21、31日是的6：30执行一次ls 命令。130 6 */10 * * ls 5.每晚的21:30重启 nginx。130 21 * * * /etc/init.d/nginx restart 6.每月1、 10、22日的4 : 45重启nginx。145 4 1,10,22 * * /etc/init.d/nginx restart 7.每周六、周日的1 : 10重启nginx。110 1 * * 6,0 /etc/init.d/nginx restart 8.每天18 : 00至23 : 00之间每隔30分钟重启nginx。10,30 18-23 * * * /etc/init.d/nginx restart 9.每星期六的11 : 00 pm重启nginx。10 23 * * 6 /etc/init.d/nginx restart 10.每一小时重启nginx1* */1 * * * /etc/init.d/nginx restart 11.晚上11点到早上7点之间，每 隔一小时重启nginx1* 23-7/1 * * * /etc/init.d/nginx restart 12.每月的4号与每周一到周三 的11点重启nginx10 11 4 * mon-wed /etc/init.d/nginx restart 13.一月一号的4点重启nginx10 4 1 jan * /etc/init.d/nginx restart 14.每半小时同步一下时间1*/30 * * * * /usr/sbin/ntpdate 210.72.145.20 15.每1分钟执行一次command1* * * * * command 16.每隔两天的上午8点到11点的第3和第15分钟执行13,15 8-11 */2 * * command 17.每个星期一的上午8点到11点的第3和第15分钟执行13,15 8-11 * * 1 command 18.每月1、10、22日的4 : 45重启smb145 4 1,10,22 * * /etc/init.d/smb restart 19.每周六、周日的1:10重启smb110 1 * * 6,0 /etc/init.d/smb restart 20.每天18 : 00至23 : 00之间每隔30分钟重启smb10,30 18-23 * * * /etc/init.d/smb restart 21.晚上11点到早上7点之间，每隔一小时重启smb1* 23-7/1 * * * /etc/init.d/smb restart 22.每月的4号与每周一到周三的11点重启smb10 11 4 * mon-wed /etc/init.d/smb restart 23.一月一号的4点重启smb10 4 1 jan * /etc/init.d/smb restart 24.每天早上7点执行一次 /bin/ls :10 7 * * * /bin/ls 25. 在12 月内, 每天的早上 6 点到 12 点中，每隔3个小时执行一次 /usr/bin/backup10 6-12/3 * 12 * /usr/bin/backup 26.周一到周五每天下午 5:00 寄一封信给 alex@domain.name :10 17 * * 1-5 mail -s &quot;hi&quot; alex@domain.name &lt; /tmp/maildata 27.每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”120 0-23/2 * * * echo &quot;haha&quot; 28.每天早上6点10分110 6 * * * date 29.每两个小时10 */2 * * * date 30.晚上11点到早上8点之间每两个小时，早上8点10 23-7/2，8 * * * date 31.每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点10 11 4 * mon-wed date 32.1月份日早上4点10 4 1 jan * date /dev/null 2&gt;&amp;1解释 0 是标准输入 使用&lt;或&lt;&lt; 1 是标准输出 使用&gt;或&gt;&gt; 2 是标准错误输出 使用2&gt;或2&gt;&gt; >/dev/null 2&gt;&amp;1 即:错误输出与标准输出全部重定向到空,可以写成1&gt;/dev/null 2&gt;/dev/null 事例：我们首先创建test.sh脚本如下：123#! /bin/shecho &quot;hello, everybody, now is &quot; `date`date &gt;&gt; test.txt 然后添加作业1234* * * * * /home/oracle/test.sh &gt;/home/oracle/log.txt &amp; 默认值为1，即和下面命令一致* * * * * /home/oracle/test.sh 1&gt;/home/oracle/log.txt &amp;* * * * * /home/oracle/test.sh 2&gt;/home/oracle/log.txt &amp;* * * * * /home/oracle/test.sh 2&gt;/home/oracle/log.txt 2&gt;&amp;1 &amp; 1,2将tesh.sh 命令输出重定向到log.txt, 即输出内容不打印到屏幕上，而是输出到log.txt文件中。如果你需要追加而不是覆盖，可以用 &gt;&gt;代替&gt;2&gt;&amp;1 是将错误输出重定向到标准输出。 然后将标准输入重定向到文件log.txt。&amp;1 表示的是文件描述1，表示标准输出，如果这里少了&amp;就成了数字1，就表示重定向到文件1。 关于重定向的作用 重定向到空可以避免碎片文件占用inode资源 重定向到一个指定log里，可以看任务是否执行 关于导致磁盘inode满情况分析 定时任务执行成功or失败时，程序会向上层发送mail，由于平时工作中不打开sendmail功能，所以邮件会存储在临时目录/var/spool/clientmqueue，随着执行的任务次数多，文件也会越来越多，直到某一天，添加文件时，提示No space left on device，主要问题原因不在于垃圾文件会占很大空间，而在于每个文件会占用inode节点。（centos6.4默认不装sendmail,可能不会导致这个问题发生）。 所以crontab规则后需加 /dev/null 2&gt;&amp;1。注：&gt;&gt; 与 &gt;/dev/null 2&gt;&amp;1不可同时存在，不然无法执行 使用crontab工具的注意事项注意环境变量问题 有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的， 程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。 不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点： 脚本中涉及文件路径时写全局路径； 脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如： 12345cat start_cbp.sh#!/bin/shsource /etc/profileexport RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf/usr/local/jboss-4.0.5/bin/run.sh -c mev &amp; 当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如： 10 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh 注意清理系统用户的邮件日志 每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。 例如，可以在crontab文件中设置如下形式，忽略日志输出：10 */3 * * * /usr/local/apache2/apachectl restart &gt;/dev/null 2&gt;&amp;1 /dev/null 2&gt;&amp;1表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。——————-&gt;&gt;为crontab中的任务增加自己的日志，这样出错后，比较容易看到原因。10 6 * * * $HOME/for_crontab/createTomorrowTables &gt;&gt; $HOME/for_crontab/mylog.log 2&gt;&amp;1 把错误输出和标准输出都输出到mylog.log中。注意：不要写成10 6 * * * $HOME/for_crontab/createTomorrowTables 2&gt;&amp;1 &gt;&gt; $HOME/for_crontab/mylog.log 否则就输出到标准输出了 关于导致磁盘inode满情况分析 定时任务执行成功or失败时，程序会向上层发送mail，由于平时工作中不打开sendmail功能，所以邮件会存储在临时目录/var/spool/clientmqueue，随着执行的任务次数多，文件也会越来越多，直到某一天，添加文件时，提示No space left on device，主要问题原因不在于垃圾文件会占很大空间，而在于每个文件会占用inode节点。（centos6.4默认不装sendmail,可能不会导致这个问题发生）。所以crontab规则后需加 /dev/null 2&gt;&amp;1。注：&gt;&gt; 与 &gt;/dev/null 2&gt;&amp;1不可同时存在，不然无法执行 系统级任务调度与用户级任务调度 系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过crontab –uroot –e来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。 其他注意事项 新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。当crontab突然失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错 tail -f /var/log/cron。千万别乱运行crontab -r。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义\\%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+\\%Y\\%m\\%d’。 写定时任务注意点：掌握了下面7点，写定时任务就不在犯错。 序号 注意点 1 每个任务添加注释，谁写的，什么时间写的，完成什么需求? 2 执行脚本使用/bin/sh（防止脚本无执行权限），要执行的文件路径是从根开始的绝对路径（防止找不到文件） 3 尽量把要执行的命令放在脚本里，然后把脚本放在定时任务里。对于调用脚本的定时任务，可以把标准输出错误输出重定向到空。 4 定时任务中带%无法执行，需要加\\转义 5 如果时上有值，分钟上必须有值 6 日和周不要同时使用，会冲突 7 >>与&gt;/dev/null 2&gt;&amp;1不要同时存在 书写举例：12#backup mysql byyangrong at 2013-9-430 4 * * * /bin/shtar_mysql.sh &gt;/dev/null 2&gt;&amp;1 调试定时任务 一个任务不能轻易的直接推上线上服务器，需要在测试服务器上测试好。 序号 调试方法 1 增加频率调试任务，如:生产环境2小时一次，测试机2分钟一次 2 加快时间调试任务，如:生产环境1天后执行，则添加任务后修改设备时间 3 重定向到一个日志里，查看任务执行情况。一个是定时任务后加log，一个是脚本后加log 4 环境变量可能导致问题 5 通过日志定位问题。 tail /var/log/cron 日志文件默认情况下,crontab中执行的日志写在/var/log下,如:看 /var/log/cron这个文件就可以，可以用tail -f /var/log/cron观察1234[root@MLibra spool]# ll /var/log/cron*-rw-------. 1 root root 13887 11月 23 15:24 /var/log/cron-rw-------. 1 root root 19507 11月 15 03:40 /var/log/cron-20161115-rw-------. 1 root root 5738 11月 22 04:20 /var/log/cron-20161122 crontab的日志比较简单，当crond执行任务失败时会给用户发一封邮件。恰巧在我们的一台服务器上发现一个任务没有正常执行，而且crond发邮件也失败了。通过看mail的日志，看到是磁盘空间不足造成的。可以将每条 crontab中的任务增加自己的日志，有利于查找执行失败原因。0 6 * * * //root/script/ss.sh &gt;&gt; /root/for_crontab/mylog.log 2&gt;&amp;1把错误输出和标准输出都输出到mylog.log中。","tags":[{"name":"find tar","slug":"find-tar","permalink":"YOUR_SITE/tags/find-tar/"}]}]}